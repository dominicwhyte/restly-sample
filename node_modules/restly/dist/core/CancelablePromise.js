"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _isResolved, _isRejected, _isCancelled, _cancelHandlers, _promise, _resolve, _reject;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CancelablePromise = exports.CancelError = void 0;
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
class CancelError extends Error {
    constructor(message) {
        super(message);
        this.name = 'CancelError';
    }
    get isCancelled() {
        return true;
    }
}
exports.CancelError = CancelError;
class CancelablePromise {
    constructor(executor) {
        _isResolved.set(this, void 0);
        _isRejected.set(this, void 0);
        _isCancelled.set(this, void 0);
        _cancelHandlers.set(this, void 0);
        _promise.set(this, void 0);
        _resolve.set(this, void 0);
        _reject.set(this, void 0);
        __classPrivateFieldSet(this, _isResolved, false);
        __classPrivateFieldSet(this, _isRejected, false);
        __classPrivateFieldSet(this, _isCancelled, false);
        __classPrivateFieldSet(this, _cancelHandlers, []);
        __classPrivateFieldSet(this, _promise, new Promise((resolve, reject) => {
            __classPrivateFieldSet(this, _resolve, resolve);
            __classPrivateFieldSet(this, _reject, reject);
            const onResolve = (value) => {
                var _a, _b;
                if (__classPrivateFieldGet(this, _isResolved) || __classPrivateFieldGet(this, _isRejected) || __classPrivateFieldGet(this, _isCancelled)) {
                    return;
                }
                __classPrivateFieldSet(this, _isResolved, true);
                (_b = (_a = __classPrivateFieldGet(this, _resolve)).call) === null || _b === void 0 ? void 0 : _b.call(_a, this, value);
            };
            const onReject = (reason) => {
                var _a, _b;
                if (__classPrivateFieldGet(this, _isResolved) || __classPrivateFieldGet(this, _isRejected) || __classPrivateFieldGet(this, _isCancelled)) {
                    return;
                }
                __classPrivateFieldSet(this, _isRejected, true);
                (_b = (_a = __classPrivateFieldGet(this, _reject)).call) === null || _b === void 0 ? void 0 : _b.call(_a, this, reason);
            };
            const onCancel = (cancelHandler) => {
                if (__classPrivateFieldGet(this, _isResolved) || __classPrivateFieldGet(this, _isRejected) || __classPrivateFieldGet(this, _isCancelled)) {
                    return;
                }
                __classPrivateFieldGet(this, _cancelHandlers).push(cancelHandler);
            };
            Object.defineProperty(onCancel, 'isResolved', {
                get: () => __classPrivateFieldGet(this, _isResolved)
            });
            Object.defineProperty(onCancel, 'isRejected', {
                get: () => __classPrivateFieldGet(this, _isRejected)
            });
            Object.defineProperty(onCancel, 'isCancelled', {
                get: () => __classPrivateFieldGet(this, _isCancelled)
            });
            return executor(onResolve, onReject, onCancel);
        }));
    }
    then(onFulfilled, onRejected) {
        return __classPrivateFieldGet(this, _promise).then(onFulfilled, onRejected);
    }
    catch(onRejected) {
        return __classPrivateFieldGet(this, _promise).catch(onRejected);
    }
    finally(onFinally) {
        return __classPrivateFieldGet(this, _promise).finally(onFinally);
    }
    cancel() {
        var _a, _b;
        if (__classPrivateFieldGet(this, _isResolved) || __classPrivateFieldGet(this, _isRejected) || __classPrivateFieldGet(this, _isCancelled)) {
            return;
        }
        __classPrivateFieldSet(this, _isCancelled, true);
        if (__classPrivateFieldGet(this, _cancelHandlers).length) {
            try {
                for (const cancelHandler of __classPrivateFieldGet(this, _cancelHandlers)) {
                    cancelHandler();
                }
            }
            catch (error) {
                console.warn('Cancellation threw an error', error);
                return;
            }
        }
        __classPrivateFieldGet(this, _cancelHandlers).length = 0;
        (_b = (_a = __classPrivateFieldGet(this, _reject)).call) === null || _b === void 0 ? void 0 : _b.call(_a, this, new CancelError('Request aborted'));
    }
    get isCancelled() {
        return __classPrivateFieldGet(this, _isCancelled);
    }
}
exports.CancelablePromise = CancelablePromise;
_isResolved = new WeakMap(), _isRejected = new WeakMap(), _isCancelled = new WeakMap(), _cancelHandlers = new WeakMap(), _promise = new WeakMap(), _resolve = new WeakMap(), _reject = new WeakMap();
//# sourceMappingURL=CancelablePromise.js.map